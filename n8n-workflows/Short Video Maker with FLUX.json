{
  "active": false,
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set Global Variables1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video": {
      "main": [
        [
          {
            "node": "Wait for Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Processing": {
      "main": [
        [
          {
            "node": "Check Video Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Video Status": {
      "main": [
        [
          {
            "node": "Is Video Ready?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Video Ready?": {
      "main": [
        [
          {
            "node": "Download Video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait and Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Video": {
      "main": [
        [
          {
            "node": "Save Video File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait and Retry": {
      "main": [
        [
          {
            "node": "Check Video Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Script Writer1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Set Global Variables1": {
      "main": [
        [
          {
            "node": "Script Writer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Script Writer1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Images Flux Free": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Images Flux Free",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bridge Code1": {
      "main": [
        [
          {
            "node": "Collect All Images1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect All Images1": {
      "main": [
        [
          {
            "node": "Create Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-03T17:24:13.080Z",
  "id": "wTqTPaeKGCtkzujP",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Short Video Maker with FLUX",
  "nodes": [
    {
      "parameters": {},
      "id": "d0acce8e-cdfb-4de0-afa0-caffc0b9fb7b",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2288,
        -384
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://short-video-maker:3123/api/short-video",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.output }}",
        "options": {}
      },
      "id": "8f6988ea-9a1b-400c-bd1d-2e0f01189384",
      "name": "Create Video",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1408,
        -416
      ]
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "minutes"
      },
      "id": "46c9bfe7-ade0-4e82-ac4e-d7909ef7acc4",
      "name": "Wait for Processing",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1616,
        -416
      ],
      "webhookId": "9954185b-179e-43c3-ab2e-3193c61154bc"
    },
    {
      "parameters": {
        "url": "=http://short-video-maker:3123/api/short-video/{{ $('Create Video').item.json.videoId }}/status",
        "options": {}
      },
      "id": "bde916d8-aa47-4209-9fd1-f2d53c45f0d5",
      "name": "Check Video Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1824,
        -416
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "ready",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "30eadd35-9604-4d85-be6e-ec848b7b3f46",
      "name": "Is Video Ready?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2048,
        -416
      ]
    },
    {
      "parameters": {
        "url": "=http://short-video-maker:3123/api/short-video/{{ $('Create Video').item.json.videoId }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "ba468c24-b1bb-4bfb-8580-743f2a6f515f",
      "name": "Download Video",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2272,
        -512
      ]
    },
    {
      "parameters": {
        "fileName": "=generated_video_{{ $('Create Video').item.json.videoId }}.mp4",
        "options": {}
      },
      "id": "7ad7b038-64e4-449b-9596-e33f471f7fda",
      "name": "Save Video File",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        2496,
        -512
      ]
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "id": "e02970d1-ae24-4cfc-8cd8-575ba6039526",
      "name": "Wait and Retry",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2272,
        -304
      ],
      "webhookId": "7dec28d1-5e9c-41e8-b08f-e00225416809"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a social media marketing specialist creating a YouTube video.\nYour task is to generate a series of detailed scenes based on provided input variables, optimized for engagement.\n\n---\n\n### Input Variables:\n\n- **SCRIPT_CONTENT**: The full video script to break down into individual scenes. (This comes from `Script Writer`)\n- **VIDEO_TARGET_LENGTH**: The target duration for the video (e.g., \"1-2 MINUTE\").\n- **VIDEO_TOPIC**: The main subject or title of the video.\n- **SCRIPT_NARRATION_TONE**: A detailed description of the desired tone/style for the script's voice-over and overall feel.\n\n\n\n- **SCRIPT_CONTENT**: {{ $json.output }}\n- **VIDEO_TARGET_LENGTH**: {{ $('Set Global Variables1').item.json.Video_Length }}\n- **VIDEO_TOPIC**: {{ $('Set Global Variables1').item.json.Topic }}\n- **SCRIPT_NARRATION_TONE**: {{ $('Set Global Variables1').item.json.Script_Tone }}\n- **SCENE_TARGET_WORD COUNT**: {{ $('Set Global Variables1').item.json.Target_Word_Count }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a viral video script generator that creates JSON configurations for an AI video maker. Your job is to take a raw script and convert it into a JSON object containing scenes with narration and detailed, cinematic image prompts.\n\n- SCRIPT_CONTENT: {{ $json.output }}\n- VIDEO_TOPIC: {{ $('Set Global Variables1').item.json.Topic }}\n- SCRIPT_NARRATION_TONE: {{ $('Set Global Variables1').item.json.Script_Tone }}\n\n## OUTPUT FORMAT:\nYou must ONLY respond with valid JSON in this exact format:\n\n{\n  \"scenes\": [\n    {\n      \"text\": \"Narration text for the scene (15-25 words).\",\n      \"imagePrompt\": \"A detailed, cinematic image prompt for FLUX. Describe the scene, lighting, and mood. End with 'ultra-realistic, 8K, cinematic, portrait 9:16'.\"\n    }\n  ],\n  \"config\": {\n    \"music\": \"MUSIC_MOOD\",\n    \"voice\": \"VOICE_NAME\",\n    \"orientation\": \"portrait\"\n  }\n}\n\n## GUIDELINES:\n- Break the SCRIPT_CONTENT into logical scenes.\n- The `text` should be conversational narration, 15-25 words each.\n- The `imagePrompt` must be highly descriptive and tailored to the narration text.\n- Select an appropriate VOICE_NAME and MUSIC_MOOD from the lists below.\n\n## AVAILABLE VOICES:\naf_nova, af_sarah, am_adam, am_liam, af_heart, af_alloy, af_echo, bf_emma, bm_george\n\n## AVAILABLE MUSIC MOODS:\nchill, hopeful, contemplative, uneasy, dark, epic, happy\n\n## IMPORTANT:\n- Respond ONLY with the JSON. No explanations or extra text.\n- Ensure the JSON is valid and properly formatted."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -1248,
        -384
      ],
      "id": "42de5d25-600b-49da-a5b2-d45185c4599b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-chat-v3-0324:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1536,
        -128
      ],
      "id": "dfca4401-d93c-4b21-aee8-9047eabaae73",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "Z0qdSGsCKeFZM9R5",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"scenes\": [\n    {\n      \"text\": \"Narration text for the scene (15-25 words).\",\n      \"imagePrompt\": \"A detailed, cinematic image prompt for FLUX. Describe the scene, lighting, and mood. End with 'ultra-realistic, 8K, cinematic, portrait 9:16'.\"\n    }\n  ],\n  \"config\": {\n    \"music\": \"MUSIC_MOOD\",\n    \"voice\": \"VOICE_NAME\",\n    \"orientation\": \"portrait\"\n  }\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1360,
        -112
      ],
      "id": "28cdfa9b-e10e-457e-823c-1934e736d97f",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "77c08d99-49cf-482f-8302-f3f236319c09",
              "name": "Video_Length",
              "value": "30 - 45 seconds",
              "type": "string"
            },
            {
              "id": "b674fe0d-b8c0-4141-98f4-dad8f0d8aa0d",
              "name": "Script_Tone",
              "value": "Spooky, intense tone like a narrator telling a forbidden historical secret or \"Don Wilder\" - the host of \"cities of the underworld\" from the History Channel",
              "type": "string"
            },
            {
              "id": "b3099542-7b43-403b-ad7c-f4182d803d90",
              "name": "Target_Word_Count",
              "value": "15 - 25 words per scene",
              "type": "string"
            },
            {
              "id": "26f642b6-eaf1-447b-89df-9265e3193b67",
              "name": "Topic",
              "value": "5 secret bunkers of the ancient world",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2000,
        -384
      ],
      "id": "e5541b5c-23d4-4576-97ef-5a27e215b84a",
      "name": "Set Global Variables1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=ABSOLUTELY NO SECTION HEADINGS, LABELS, OR DIRECTOR SPEAK (e.g., 'HOOK (0:02):', 'FLOW:', 'TWIST:', 'CTA:'). YOUR OUTPUT MUST BE THE RAW SCRIPT SPOKEN WORDS ONLY. DO NOT INCLUDE ANY MARKDOWN SUCH AS BOLDING OR ITALICS IN THE FINAL SCRIPT.\n\nYOU ARE AN AI MASTERMIND specialized in crafting high-impact, viral story scripts.\nYour task is to generate a script based on provided input variables.\n\n---\n\n### Input Variables:\n\n- **Video_Length**: The target duration for the video script (e.g., \"45 - 90 SECONDS\").\n- **Script_Tone**: A detailed description of the desired tone and persona for the script's narration.\n- **TITLE**: The main topic or title to base the story script on.\n- **Target_Word_Count**: The exact word count the script must achieve.\n\n---\n\n### Script Generation Requirements:\n\nGenerate a VIRAL story script based on the title/topic: {{ $json.Topic }}\nThe script must be  **{{ $json.Target_Word_Count }}**. To achieve this length, elaborate significantly on details, expand on each section, provide more descriptive imagery, and deepen the narrative. Do NOT just repeat content or add filler. Instead, add richer context, additional examples, or more speculative elements to the story.\n\n\n\nThe script should have:\n1. An Amazing, jaw-dropping, Scroll Stopping hook in the first 3 - 5 seconds. (Ensure the *content* serves as the hook, without labeling it.)\n\n2. A tight, escalating flow (with short punchy sentences, no filler) WE CANNOT AFFORD TO LOSE VIEWERS IN THE MIDDLE WE NEED TO KEEP THEM WATCHING (Ensure the *content* maintains flow, without labeling it.)\n\n3. A shocking or mysterious twist (Ensure the *content* contains a twist, without labeling it.)\n\n4. A killer final line or CTA to keep viewers watching more. MENTION TO FOLLOW US AND LIKE AND SUBSCRIBE FOR MORE OR SOMETHING SIMILAR. (Ensure the *content* concludes with a CTA, without labeling it.)\n\nEnsure the script's *progression* naturally moves through Hook, Setup, Conflict, Twist/Resolution, and Call to Action, without explicit section headings or any kind of internal formatting.\nUse a **{{ $json.Script_Tone }}** tone.\nUse simple, casual, spoken-style English, as if someone is telling the story directly to the viewer.\nAim for emotional impact, relatability, or shock value.\nBe engaging and relatable for teenagers and adults.\n\nTHE SCRIPT MUST NOT BE LONGER THAN {{ $json.Video_Length }} optimized for text-to-speech generators—using simple, clear sentences with natural rhythm and conversational tone.\n\nENSURE THE VIDEO WILL BE LESS THAN 60 SECONDS LONG\n---\n\n### Output Format:\n\nReturn strictly the raw, unformatted script text.\n\n# ULTIMATE RULE: YOUR FINAL OUTPUT IS PURE, UNFORMATTED, SPOKEN SCRIPT TEXT. NO HEADINGS. NO LABELS. NO MARKDOWN. NOTHING ELSE.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1760,
        -384
      ],
      "id": "383fe930-8086-4c6e-b880-eb7a7b051780",
      "name": "Script Writer1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.together.xyz/v1/images/generations",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"black-forest-labs/FLUX.1-schnell-Free\",\n  \"prompt\": \"{{ $json.imagePrompt }}\",\n  \"width\": 720,\n  \"height\": 1280,\n  \"steps\": 4,\n  \"seed\": 1,\n  \"response_format\": \"url\",\n  \"output_format\": \"jpeg\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 5
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -208,
        -160
      ],
      "id": "b9b571aa-e3f5-49e8-899c-bcae31dcc7a4",
      "name": "Generate Images Flux Free",
      "credentials": {
        "httpHeaderAuth": {
          "id": "JdfDCxKTwaEVNBKO",
          "name": "TOGETHER_API"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.data[0].url }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        336,
        48
      ],
      "id": "391b2868-5526-432b-a2b8-ce502d055eb1",
      "name": "Download Image"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -576,
        -304
      ],
      "id": "d1f798e7-9332-4af6-9290-152478ea0b30",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// This is the most fundamental way to get data in n8n.\n// It retrieves the array of all incoming items, and we select the first one.\nconst firstItem = $input.all()[0];\n\n// Now we can safely get the JSON data from that item.\nconst agentData = firstItem.json;\n\n// This variable will hold our final array of scenes.\nlet scenesArray = [];\n\n// The rest of this logic is correct and will now work.\nif (agentData.output && agentData.output.scenes) {\n  scenesArray = agentData.output.scenes;\n} else if (agentData.scenes) {\n  scenesArray = agentData.scenes;\n}\n\n// If we successfully found a scenes array, return it.\nif (scenesArray && scenesArray.length > 0) {\n  return scenesArray;\n} else {\n  // If no scenes were found, stop with a clear error.\n  throw new Error(\"Could not find a 'scenes' array in the input data. Check the AI Agent output.\");\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        -384
      ],
      "id": "b7f5743a-b73e-416d-9a8a-4856d3988eca",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// This code assumes it's receiving binary image data from the Download Image node\n\nconst items = $input.all();\nconst output = [];\n\nitems.forEach((item, index) => {\n  const timestamp = Date.now();\n  const filename = `temp_scene_${index}_${timestamp}.jpg`;\n  const filepath = `/mnt/m2drive/docker-data/short_video_maker/images/${filename}`;\n\n  output.push({\n    json: {\n      ...item.json,\n      sceneIndex: index,\n      imageFilename: filename,\n      imagePath: filepath\n    },\n    binary: item.binary  // Ensure binary data is passed through for writing\n  });\n});\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        -416
      ],
      "id": "aab79230-38d5-45d9-a352-a8ea198243e2",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Fixed Bridge Code - processes downloaded images and creates video configuration\nconst allItems = $input.all();\n\n// Validation\nif (!allItems || allItems.length === 0) {\n  throw new Error(\"No items received from previous node\");\n}\n\n// Get the original AI Agent output - correct way to access node data\nconst originalAgentData = $('AI Agent').first().json.output;\n\n// Validation for AI Agent data\nif (!originalAgentData || !originalAgentData.scenes) {\n  throw new Error(\"Could not find scenes data from AI Agent node\");\n}\n\n// Process each downloaded image item and preserve binary data\nconst outputItems = [];\n\nallItems.forEach((item, index) => {\n  if (originalAgentData.scenes && originalAgentData.scenes[index]) {\n    const scene = originalAgentData.scenes[index];\n    \n    // Create NEW output item (don't modify existing item)\n    const newItem = {\n      json: {\n        text: scene.text,\n        imagePrompt: scene.imagePrompt,\n        sceneIndex: index,\n        // Include original headers info\n        statusCode: item.json.statusCode,\n        // Include the video config only on the first item\n        ...(index === 0 ? {\n          videoConfig: {\n            scenes: originalAgentData.scenes.map((s, i) => ({\n              text: s.text,\n              imagePrompt: s.imagePrompt,\n              sceneIndex: i\n            })),\n            config: originalAgentData.config || {\n              music: \"dark\",\n              voice: \"bf_emma\", \n              orientation: \"portrait\"\n            }\n          }\n        } : {})\n      }\n    };\n    \n    // Only add binary if it exists\n    if (item.binary) {\n      newItem.binary = item.binary;\n    }\n    \n    outputItems.push(newItem);\n  }\n});\n\nconsole.log(\"Bridge code processed\", outputItems.length, \"items with binary data preserved\");\n\n// Return all items with preserved binary data\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        -416
      ],
      "id": "6f575db5-94f0-4a80-ad3d-0eeee8a4ebe8",
      "name": "Bridge Code1"
    },
    {
      "parameters": {
        "jsCode": "// Collect all images with their binary data and create final video config\nconst allItems = $input.all();\n\n// Get the video config from the first item\nconst videoConfig = allItems[0].json.videoConfig;\nif (!videoConfig) {\n  throw new Error(\"No video config found in first item\");\n}\n\n// Process each image and convert to base64\nconst scenesWithImages = [];\n\nallItems.forEach((item, index) => {\n  // Convert binary to base64\n  let base64Image = '';\n  if (item.binary && item.binary.data) {\n    base64Image = Buffer.from(item.binary.data).toString('base64');\n  }\n  \n  scenesWithImages.push({\n    text: item.json.text,\n    imagePrompt: item.json.imagePrompt,\n    imageData: `data:image/jpeg;base64,${base64Image}`,\n    sceneIndex: item.json.sceneIndex\n  });\n});\n\n// Create final video configuration\nconst finalVideoConfig = {\n  scenes: scenesWithImages,\n  config: videoConfig.config\n};\n\nconsole.log(`Processed ${scenesWithImages.length} scenes with images`);\n\n// Return single item with complete video config\nreturn [{\n  json: {\n    output: finalVideoConfig\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        -416
      ],
      "id": "f183a4c2-e2a6-4be4-bf6d-ca3ead7c2c00",
      "name": "Collect All Images1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.imagePath }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        96,
        -416
      ],
      "id": "a38ad03b-3f1c-41cf-b839-335c92800bc6",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        96,
        -160
      ],
      "id": "51bc09be-4fab-4388-9afa-bfcf915a7dc8",
      "name": "Wait",
      "webhookId": "4d0224f0-070a-47f5-ba0a-8f727ad34352"
    }
  ],
  "pinData": {
    "Manual Trigger": [
      {
        "json": {}
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-07T17:55:52.395Z",
  "versionId": "97e78188-ae3c-4fc0-a460-e157948218c0"
}