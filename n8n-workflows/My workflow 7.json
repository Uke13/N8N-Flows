{
  "active": false,
  "connections": {
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate content",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Configure": {
      "main": [
        [
          {
            "node": "Get music tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate content": {
      "main": [
        [
          {
            "node": "Pick the right music",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Check video status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download the video": {
      "main": [
        [
          {
            "node": "YouTube",
            "type": "main",
            "index": 0
          },
          {
            "node": "YouTube1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start generating the video": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check video status": {
      "main": [
        [
          {
            "node": "Ready?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ready?": {
      "main": [
        [
          {
            "node": "Download the video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get music tags": {
      "main": [
        [
          {
            "node": "Group the music tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Pick the right music",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Pick the right music": {
      "main": [
        [
          {
            "node": "Start generating the video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group the music tags": {
      "main": [
        [
          {
            "node": "Generate content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Pick the right music",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Generate content",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive3": {
      "main": [
        [
          {
            "node": "[Tiktok] Publish via Blotato",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Configure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-03T13:42:51.048Z",
  "id": "td6JUuJV73mdEbTm",
  "isArchived": false,
  "meta": null,
  "name": "My workflow 7",
  "nodes": [
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"video_title\": {\n          \"type\": \"string\",\n          \"description\": \"the title of the video we use on YouTube\"\n        },\n        \"scenes\": {\n            \"type\": \"array\",\n            \"description\": \"the scenes of the video\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"text\": {\n                        \"type\": \"string\",\n                        \"description\": \"the main content; this will be used to generate speech from\"\n                    },\n                    \"searchTerms\": {\n                        \"type\": \"array\",\n                        \"description\": \"the search terms to use to find background videos on pexels\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"required\": [\n                    \"text\",\n                    \"searchTerms\"\n                ]\n            }\n        }\n    },\n    \"required\": [\n        \"scenes\",\n        \"video_title\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -2368,
        480
      ],
      "id": "e21eda69-a2ea-466b-b46c-005b684a80fb",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a19f9caa-f1aa-4ff0-a270-59248eeb27dd",
              "name": "SERVER_URL",
              "value": "YOUR_SERVER_URL",
              "type": "string"
            },
            {
              "id": "85f6a401-7a8f-4002-900d-8320cee8f553",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3216,
        144
      ],
      "id": "3c0f39ce-306b-4371-b64a-fbcde71a9f97",
      "name": "Configure"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I'm creating a video programmatically using an API.\nThe API needs scenes to work with.\n\nEach scene requires:\n\nA text that will be turned into speech.\n\n2–3 one-word search terms that will be used to pull background videos from the Pexels API.\n\nYour job is to create a short 4-scene video around any viral or curious topic — like strange science, forgotten history, bizarre human body facts, creepy internet stories, or hidden movie details. These videos are meant for TikTok and YouTube Shorts, so they should be fast, attention-grabbing, and packed with curiosity.\n\nThe channel name is “quiick curioss.” Each scene should feel unique, weird, or shocking — something that would make someone say “No way… I need to know more.”\n\nMany videos should start with lines like:\n\n“Did you know…”\n\n“Have you ever heard of…”\n\n“What would you do if…”\n\n“Here’s something you won’t believe…”\n\nMake sure each time you:\n\nChoose a new viral topic — don’t repeat.\n\nKeep the tone curious, strange, or mysterious.\n\nEnd the last scene with a twist or a hook.\n\nYour goal is to make viewers stop scrolling, feel intrigued, and want to watch more videos from quiick curioss.\n\n",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -2464,
        144
      ],
      "id": "3005baef-86bb-47ac-9bef-e7552add5ded",
      "name": "Generate content",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure').item.json.SERVER_URL }}/api/short-video",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"scenes\": {{ JSON.stringify($('Generate content').item.json.output.scenes, null, 2) }},\n  \"config\": {\n    \"paddingBack\": 1500,\n    \"music\": \"{{ $json.output.musicTag }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1520,
        144
      ],
      "id": "96da5aee-6de2-4e05-98b1-9c0efaf656cb",
      "name": "Start generating the video"
    },
    {
      "parameters": {
        "amount": 25
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1200,
        128
      ],
      "id": "c0b97e97-2445-4524-a05d-24b97bac50f0",
      "name": "Wait",
      "webhookId": "fe4501f9-3334-4fc8-b3dd-83ea0ebb14a2"
    },
    {
      "parameters": {
        "url": "={{ $('Configure').item.json.SERVER_URL }}/api/short-video/{{ $('Start generating the video').item.json.videoId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        64
      ],
      "id": "46e9ddd5-854b-4f27-948f-5fc3f128abd9",
      "name": "Download the video",
      "alwaysOutputData": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "url": "={{ $('Configure').item.json.SERVER_URL }}/api/short-video/{{ $('Start generating the video').item.json.videoId }}/status",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -928,
        128
      ],
      "id": "ca581fcd-7c2a-4ed8-9e07-b1bb58668147",
      "name": "Check video status",
      "alwaysOutputData": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6cc1bd80-2bb7-47b6-950e-be3d6a36a965",
              "leftValue": "={{ $json.status }}",
              "rightValue": "ready",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -704,
        128
      ],
      "id": "cf300dad-0ee1-4a96-a91f-95643a4b2f71",
      "name": "Ready?"
    },
    {
      "parameters": {
        "url": "={{ $json.SERVER_URL }}/api/music-tags",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3024,
        144
      ],
      "id": "27ed9ddc-d8c6-40de-b695-2cf0d4eb507f",
      "name": "Get music tags"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"musicTag\": {\n            \"type\": \"string\",\n            \"description\": \"the selected music tag that goes well with the video\"\n        }\n    },\n    \"required\": [\n        \"musicTag\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1840,
        368
      ],
      "id": "0d637e3e-306e-4216-8cde-b59bcf2b1265",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I'm generating a video programmatically using an API. I've already generated the scenes, and your task is to find the right music tag for he video.\n\n<VideoScenes>\n{{ $json.output.scenes.map(item => item.text).map(item => `<VideoScene>${item}</VideoScene>`).join('\\n') }}\n</VideoScenes>\n\n<MusicTags>\n{{ $('Group the music tags').item.json.data.map(item => `<MusicTag>${item}</MusicTag>`).join('\\n') }}\n</MusicTags>",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -1984,
        144
      ],
      "id": "122e0da3-a4e8-42dc-aefb-35c2300c9ca0",
      "name": "Pick the right music",
      "retryOnFail": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2736,
        144
      ],
      "id": "45393b8d-13b3-4571-ad6b-1dab42616983",
      "name": "Group the music tags"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2096,
        480
      ],
      "id": "84db1e69-8d32-4f3e-b774-dd220a2adeaa",
      "name": "OpenAI Chat Model"
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "upload",
        "title": "={{ $('Generate content').item.json.output.video_title }}",
        "regionCode": "MA",
        "categoryId": "22",
        "options": {}
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "ad251618-35db-472e-97c9-75a7e10ebb13",
      "name": "YouTube"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://backend.blotato.com/v2/posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "blotato-api-key",
              "value": "=blt_f4H5IO6+r3U/g/HlgLYgUGHVocbr/8a1sPBl7tSfBxM="
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"post\": {\n    \"target\": {\n      \"targetType\": \"tiktok\",\n      \"isYourBrand\": false,\n      \"disabledDuet\": false,\n      \"privacyLevel\": \"PUBLIC_TO_EVERYONE\",\n      \"isAiGenerated\": false,\n      \"disabledStitch\": false,\n      \"disabledComments\": false,\n      \"isBrandedContent\": false\n    },\n    \"content\": {\n      \"text\": \"{{ $('Generate content').item.json.output.scenes[0].text }}\",\n      \"platform\": \"tiktok\",\n      \"mediaUrls\": [\n        \"https://drive.google.com/file/d/{{ $('Google Drive').item.json.id }}/view\"\n      ]\n    },\n    \"accountId\": \"3806\"\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        752,
        160
      ],
      "id": "2827325f-1f41-459c-b494-33a9dbdecbe3",
      "name": "[Tiktok] Publish via Blotato",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "share",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "permissionsUi": {
          "permissionsValues": {
            "role": "reader",
            "type": "anyone",
            "allowFileDiscovery": true
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        624,
        400
      ],
      "id": "51f93be9-214c-4e13-9a3f-362c2d7ff433",
      "name": "Google Drive3",
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3456,
        144
      ],
      "id": "c6571f9d-5bf1-4a5c-9882-11bd10ef58bd",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "upload",
        "title": "={{ $('Generate content').item.json.output.video_title }}",
        "regionCode": "MA",
        "categoryId": "22",
        "options": {}
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        -160,
        240
      ],
      "id": "bb2b84d4-8d52-4dd3-8ee3-f7b8109c8192",
      "name": "YouTube1"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-03T13:42:51.048Z",
      "updatedAt": "2025-08-03T13:42:51.048Z",
      "role": "workflow:owner",
      "workflowId": "td6JUuJV73mdEbTm",
      "projectId": "aYesZFcPjHzYQyLq"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-03T13:42:51.048Z",
  "versionId": "bfd70576-f2b3-43d6-9760-5c64d7cdefb8"
}