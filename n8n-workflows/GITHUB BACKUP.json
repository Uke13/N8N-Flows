{
  "active": true,
  "connections": {
    "Return": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Retain Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Is File too large?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is File too large?": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DELETE A FILE": {
      "main": [
        [
          {
            "node": "Create Updated File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retain Status": {
      "main": [
        [
          {
            "node": "DELETE A FILE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Updated File": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-23T19:43:29.408Z",
  "id": "tsqIevjhu8MVicm2",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "GITHUB BACKUP",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "7582a28a-e546-409e-8488-0e4cb503c248",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2540,
        325
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {},
      "id": "2c07c6e4-cff5-4787-8931-4e9c524aed2f",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        1000,
        200
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "0c8886cb-1a97-47d5-ad76-90960f268f7b",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1220,
        200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path + '/' + ($('Loop Over Items').item.json.name.endsWith('.json') ? $('Loop Over Items').item.json.name : $('Loop Over Items').item.json.name + '.json') }}",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{ $('Loop Over Items').item.json.name + ' (Created on ' + $now.toFormat(\"yyyy-MM-dd\") + ')' }}\n"
      },
      "id": "60b0d138-5f37-4693-bf33-210a37008bc0",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        2320,
        150
      ],
      "typeVersion": 1,
      "webhookId": "b440dead-fad0-4546-8ca7-201aa2ea2936",
      "credentials": {
        "githubOAuth2Api": {
          "id": "SkPviyNYURtVqRGy",
          "name": "GitHub OAUTH APP"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bb64ed2c-5193-4b8f-a9e8-55cb83ea244c",
              "leftValue": "={{ $json.updatedAt }}",
              "rightValue": "={{ $now.minus(1, 'days') }}",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -100,
        150
      ],
      "id": "f999f2b7-a36c-409a-921c-137207431b71",
      "name": "Filter",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Links\n- ## [Github Folder](https://github.com/AndrewBoichenko/n8n-workflows/)",
        "height": 120,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1880,
        140
      ],
      "typeVersion": 1,
      "id": "e2c13451-be05-46f5-9ee2-f1c4a231749b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# How it works \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `repo_path` for the directory path and `ID.json` for the filename.\nThe Repo Owner, Repo Name and Main folder are set using the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\nPlease check out my other items on [gumroad](https://boanse.gumroad.com/?section=k_Sn6LcT_dzJFnp5jmsM5A%3D%3D)\nYou might also like something else☺️",
        "height": 340,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1880,
        300
      ],
      "typeVersion": 1,
      "id": "e5ea648b-247e-405f-81db-ae89ae9d684c",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6655f56f-b447-43eb-84a2-be8b71524af7",
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "different",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Different"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fd0fcdea-e8c0-42be-ba51-5cd2b71ed247",
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "new",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "New"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.github_status}}",
                    "rightValue": "same",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ca3b1c68-d756-4de5-b69b-147526e19e35"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Same"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1440,
        200
      ],
      "id": "a1c6e903-52ec-4dca-858e-94763bfb3a22",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "03f51f9c-4681-4423-91d2-d32f4c18d6bc",
              "name": "repo_owner",
              "value": "Uke13",
              "type": "string"
            },
            {
              "id": "0c9b521a-b698-4b43-9eb0-bbf744760158",
              "name": "repo_name",
              "value": "N8N-Flows",
              "type": "string"
            },
            {
              "id": "91627e70-a71a-4be0-a6f6-b04d5c8469d8",
              "name": "repo_path",
              "value": "n8n-workflows",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -760,
        150
      ],
      "id": "137da17f-f3c8-4f96-82ef-6069e9a155c5",
      "name": "Config"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 21
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -980,
        150
      ],
      "id": "71fbe857-c2ce-497c-8073-57b62791be8c",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path + '/' + ($('Loop Over Items').item.json.name.endsWith('.json') ? $('Loop Over Items').item.json.name : $('Loop Over Items').item.json.name + '.json') }}",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        340,
        100
      ],
      "id": "433e567f-0e1c-463a-947a-1ca78f88616d",
      "name": "Get a file",
      "webhookId": "c12420d3-b858-4ee4-81c4-9adc03e30865",
      "alwaysOutputData": true,
      "credentials": {
        "githubOAuth2Api": {
          "id": "SkPviyNYURtVqRGy",
          "name": "GitHub OAUTH APP"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "628f6e8f-d817-4c53-89ec-b1acbb3dfef8",
              "leftValue": "={{ $json.content }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "63fc68bb-63d0-40a8-92e4-2a62b5a71812",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        560,
        100
      ],
      "id": "a798d86a-ee24-4156-a652-6ec613a0e43b",
      "name": "Is File too large?"
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "21d75e3d-7d8b-4379-a128-e08b1083e35d",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        780,
        75
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        120,
        150
      ],
      "id": "3666a28b-d1f9-4196-bed3-1e1954a784c6",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "chatId": "7439997846",
        "text": "=✅ Backup has completed {{$json.total_workflows}} workflows have been processed.\nNewly added - {{$json.new_files_count}}\nExisting updated - {{$json.updated_files_count}}\n\nBackup complete at {{$now.toFormat(\"yyyy-MM-dd HH:mm:ss\")}}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        560,
        -100
      ],
      "id": "cb4e852f-d624-4d16-b255-4d3e42d25bff",
      "name": "Send a text message",
      "webhookId": "c8f0aa6f-2c83-4fcf-a990-642a294967cd",
      "credentials": {
        "telegramApi": {
          "id": "HHgbp1SZSR5uC5wr",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://n8n.wtfkreative.com/api/v1/workflows",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "n8nApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-N8N-API-KEY",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MDA5MjcyMC1iYzIyLTRhZDQtOWZmOS1iNDJkZjZjZDM3YzYiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUyOTQ4NTI4fQ.s_b3AM-DBT-7yXRHy-vWWwtP2C-5novCiGcmdLkD_gk"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -540,
        150
      ],
      "id": "c6a67cea-2c4d-4aaa-9cab-4bc6dc7a150d",
      "name": "HTTP Request",
      "credentials": {
        "n8nApi": {
          "id": "tdftM5ngXHwNDhII",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -320,
        150
      ],
      "id": "b81f8553-aff9-40f4-aa52-e6f26d642efe",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst total_workflows = items.length;\nlet new_files_count = 0;\nlet updated_files_count = 0;\n\nfor (const item of items) {\n  const commitMessage = item.json.commit?.message;\n\n  if (commitMessage) {\n    if (commitMessage.includes('(Created on')) {\n      new_files_count++;\n    } else if (commitMessage.includes('(Updated on')) {\n      updated_files_count++;\n    }\n  }\n}\n\nreturn [{\n  json: {\n    total_workflows: total_workflows,\n    new_files_count: new_files_count,\n    updated_files_count: updated_files_count,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        -100
      ],
      "id": "0d861321-a181-4a72-89bb-23de1f0a9be8",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.github.com/repos/{{ $('Config').item.json.repo_owner }}/{{ $('Config').item.json.repo_name }}/contents/{{ $('Config').item.json.repo_path + '/' + ($('Get a file').item.json.name.endsWith('.json') ? $('Get a file').item.json.name : $('Get a file').item.json.name + '.json') }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubOAuth2Api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "=Deleting old version of {{$('Get a file').item.json.name}} for update"
            },
            {
              "name": "sha",
              "value": "={{ $('Get a file').item.json.sha }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2100,
        -50
      ],
      "id": "bfbf83ae-c882-4725-b632-8ac23c1e6aa2",
      "name": "DELETE A FILE",
      "credentials": {
        "githubOAuth2Api": {
          "id": "SkPviyNYURtVqRGy",
          "name": "GitHub OAUTH APP"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c40e5d03-f91e-40f4-9398-d80a65f86e44",
              "name": "final_status",
              "value": "updated",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        -50
      ],
      "id": "9085cff5-cee4-46ad-a026-ecad05884d4a",
      "name": "Retain Status"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Config').item.json.repo_path + '/' + ($('Loop Over Items').item.json.name.endsWith('.json') ? $('Loop Over Items').item.json.name : $('Loop Over Items').item.json.name + '.json') }}",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{ $('Loop Over Items').item.json.name + ' (Updated on ' + $now.toFormat(\"yyyy-MM-dd\") + ')' }}"
      },
      "id": "2a3b368c-73b9-449c-93ac-015e2376056f",
      "name": "Create Updated File",
      "type": "n8n-nodes-base.github",
      "position": [
        2320,
        -50
      ],
      "typeVersion": 1,
      "webhookId": "b440dead-fad0-4546-8ca7-201aa2ea2936",
      "credentials": {
        "githubOAuth2Api": {
          "id": "SkPviyNYURtVqRGy",
          "name": "GitHub OAUTH APP"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "ErJsFIMzI5GAr6Io",
    "timezone": "America/Chicago"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-07-26T13:52:43.407Z",
  "versionId": "7240ec73-9027-479a-b532-4b8cabb892c4"
}